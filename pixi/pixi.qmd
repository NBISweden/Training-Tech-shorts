## Intro to Pixi

This section is a brief summary of the concepts discussed in the meeting. 

## Why Pixi?

Pixi is a package management tool that serves as a replacement for Conda or Mamba. It is designed to be faster, multithreaded, and flexible. Unlike Conda, Pixi environments are not isolated, which allows you to:

- Interact with third-party tools that are available in your system's PATH.
- Benefit from faster installation of packages.

### Compatibility

Pixi is fully compatible with Conda. You can:

- Use the same Conda channels (e.g., `conda-forge`, `bioconda`).
- Use existing Conda environment files with Pixi.

### Key Difference

In Pixi, the environment configuration file (`.pixi.toml`) lives in the project directory. This ensures that the environment is tied to the project and simplifies reproducibility.

---

## Getting Started

### Installation

1. Install Pixi and add it to your shell's configuration (e.g., `.bashrc` or `.zshrc`).

```{.bash}
curl -fsSL https://pixi.sh/install.sh | bash
```

2. Initialize a Pixi environment in your project:

```{.bash}
pixi init -c conda-forge -c bioconda
```

Here:
- `-c` specifies the channels to use (e.g., `conda-forge`, `bioconda`).
- By default, Pixi will set the environment for your platform (e.g., `linux-64`).

You can specify additional platforms if needed:

```{.bash}
pixi init -p linux-64 -p osx-arm64
```

This will create a `pixi.toml`file, as well as a `pixi.lock`file. 

### Adding Packages

You can add packages to your environment using the `pixi add` command:

```{.bash}
pixi add bwa samtools
```

You can add Python packages from PyPI using Pixi:

```{.bash}
pixi add python
pixi add --pypi multiqc
```

Alternatively, you can directly modify the `.pixi.toml` file in your project directory.

---

## Managing Environments

### Files in the Directory

When you use Pixi, it creates a `.pixi` folder in your project directory. This folder contains cached files and other data. If needed, you can safely delete this folder or configure the cache to use a scratch directory.

To clean the cache:

```{.bash}
pixi clean cache
```

### Reproducibility

Pixi uses two key files for environment management:

- `.pixi.toml`: Specifies the environment configuration.
- `.pixi.lock`: Locks down the specific package versions for reproducibility.

You should commit both files to your version control system to share the exact environment setup with collaborators.

---

## Tasks in Pixi

Pixi allows you to define and run tasks directly in the `.pixi.toml` file. For example:

```toml
[tasks]
name-of-task = "nextflow run main.nf -profile PDC"
```

One can also add tasks via the command line: 

```{.bash}
pixi task add hello python hello_world.py
```

### Task Features

- Tasks can be combined or run conditionally using `depends-on`.
- You can chain tasks for complex workflows.

---

## Working with the Shell

Pixi provides a shell environment based on the Deno shell. Many basic Bash commands still work, allowing for:

- Chaining tools.
- Command substitution.

### Activating the Environment

To activate the environment:

```{.bash}
pixi shell
```

---

## Advanced Features

### Multiple Environments

- Pixi environments are tied to the project directory and based on the `.pixi.toml` file.
- While sharing the same environment across multiple projects is not currently supported, this feature is in development.

### Features

Pixi allows multiple "features" in a single project. Features are isolated from each other, helping to avoid version clashes between tools.

---

## Additional Commands

### Updating Pixi

To update Pixi:

```{.bash}
pixi self-update
```


---

## Future Developments

Pixi plans to include the ability to build packages directly in future releases.
