# Introduction to Apptainer (i.e. Singularity)

Lesson plan based around materials from [CodeRefinery](https://coderefinery.github.io/ttt4hpc_containers/basics_running_containers)

## What are containers?

- Containers isolate software, dependencies, configurations, and system libraries from the host system
- The naming came from the idea of shipping containers (which are portable & standardized)
- Virtual machines are a similar concept, but these virtualise hardware, contain complete operating systems (including the kernel), and are managed by software known as a hypervisor
- Containers on the other hand share the host OS kernel, so they don't contain complete operating systems, just user space system libraries
- This makes them lightweight, portable, and fast to start up
 
## Docker vs Apptainer containers

- Apptainer (i.e. Singularity) is intended to run reproducibly across many system types, including HPC systems
- Docker is rarely allowed on clusters, requires root access
- Their images are somewhat different - Docker images are made up of layers (Base image -> launched as container -> edited -> used as new base layer -> launched -> edited -> etc.). Apptainer images squash layers into one file (.sif format)
- These files are easily shared and can be run on any system with Apptainer installed

## Apptainer vs Singularity history & the .sif format

- Singularity was the original name of the open source project from 2015, but this turned partly commercial in 2018
- The open source part forked and joined the Linux foundation in 2021, becoming Apptainer
- The singularity image format (.sif) remains in Apptainer as a legacy of that
- Similarly when you install Apptainer, there are symlinks, so you can use `singularity pull` rather than `apptainer pull`
- For practical purposes, they are the same

## Structure of an apptainer command

- `apptainer [subcommand] [image] [additional commands]` 

- Example of `pull` and `shell`

```
apptainer pull docker://alpine
apptainer shell alpine_latest.sif
cat /etc/alpine-release
exit
cat /etc/alpine-release
cat /etc/debian_version
```

- Interact with the container from the host system:

```
apptainer exec alpine_latest.sif cat /etc/alpine-release
cat /etc/alpine-release
```
## Building .sif from a definition file (.def)

- Building a custom container requires a .def file, specifying the registry and image for the base image, and [various options for the container](https://apptainer.org/documentation/)

```default{filename="example.def"}

Bootstrap: docker
From: debian:12.5-slim

%environment
        export PATH=$PATH:/root/.pixi/bin

%runscript
                cat /etc/debian_version

%post
        export PATH=$PATH:/root/.pixi/bin
        apt-get update && \
        apt-get install -y curl && \
		curl -fsSL https://pixi.sh/install.sh | bash && \
        apt-get clean && \
        pixi global install -c bioconda -c conda-forge  minigraph

```

- Then build the container: `apptainer build minigraph.sif example.def`

- `apptainer run` executes the runscript inside the container:

`apptainer run minigraph.sif`

## Portability to HPC systems, & reproducibilty note: .sif files vs rebuilding from a .def

## Seqera containers resource

## Converting from docker: if anyone uses Docker regularly - maybe they can take this one as an example?

